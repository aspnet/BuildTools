# default-build.yml
# Description: Defines a build phase for invoking build.sh/cmd
# Parameters:
#   agentOs: [Windows (default), Linux, macOS]
#       Used in templates to define variables which are OS specific
#   buildArgs: string
#       Additional arguments to pass to the build.sh/cmd script.
#       Note: -ci is always passed
#   beforeBuild: [steps]
#       Additional steps to run before build.sh/cmd
#   afterBuild: [steps]
#       Additional steps to run after build.sh/cmd
#   artifacts:
#      publish: (boolean)
#          Should artifacts be published
#      path: (string) the path
#          The file path to artifacts output

#
# See https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema for details on this schema and the template expression syntax
#

parameters:
  agentOs: 'Windows'
  buildArgs: ''
  configuration: 'Release'
  beforeBuild: []
  afterBuild: []
  matrix: {}
  artifacts:
    publish: true
    path: 'artifacts/build/'  # TODO: this is going to change when we converge with dotnet/arcade tooling

phases:
- phase: ${{ parameters.agentOs }}
  queue:
    # If a matrix of builds has been configured, run the matrix in parallel
    ${{ if ne(parameters.matrix, '') }}:
      parallel: 4
    matrix: ${{ parameters.matrix }}
    # Map friendly OS names to the right queue
    ${{ if eq(parameters.agentOs, 'macOS') }}:
      name: Hosted macOS Preview
    ${{ if eq(parameters.agentOs, 'Linux') }}:
      name: Hosted Linux Preview
    ${{ if eq(parameters.agentOs, 'Windows') }}:
      name: Hosted VS2017
  variables:
    AgentOsName: ${{ parameters.agentOs }}
    DOTNET_HOME: $(Agent.WorkFolder)/.dotnet
    BuildScriptArgs: ${{ parameters.buildArgs }}
    BuildConfiguration: ${{ parameters.configuration }}
    ${{ insert }}: ${{ parameters.variables }}
  steps:
  - checkout: self
    clean: true
  - ${{ parameters.beforeBuild }}
  - ${{ if eq(parameters.agentOs, 'Windows') }}:
    - script: .\build.cmd -ci /p:Configuration=$(BuildConfiguration) $(BuildScriptArgs)
      displayName: Run build.cmd
  - ${{ if ne(parameters.agentOs, 'Windows') }}:
    - script: ./build.sh -ci -p:Configuration=$(BuildConfiguration) $(BuildScriptArgs)
      displayName: Run build.sh
  - task: PublishTestResults@2
    displayName: Publish test results
    condition: always()
    inputs:
      testRunner: vstest
      testResultsFiles: 'artifacts/logs/**/*.trx'
  - ${{ if eq(parameters.artifacts.publish, 'true') }}:
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
      inputs:
        pathtoPublish: ${{ parameters.artifacts.path }}
        ${{ if eq(parameters.artifacts.name, '') }}:
          artifactName: packages-$(AgentOsName)-$(BuildConfiguration)
        ${{ if ne(parameters.artifacts.name, '') }}:
          artifactName: ${{ parameters.artifacts.name }}
        artifactType: Container
  - ${{ parameters.afterBuild }}

