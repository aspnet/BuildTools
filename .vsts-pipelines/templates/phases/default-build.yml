# default-build.yml
# Description: Defines a build phase for invoking build.sh/cmd
# Parameters:
#   phaseName: string
#       The name of the phase. Defaults to the name of the OS.
#   queueName: string
#       The name of the VSTS agent queue to use.
#   agentOs: string
#       Used in templates to define variables which are OS specific. Typically from the set { Windows, Linux, macOS }
#   buildArgs: string
#       Additional arguments to pass to the build.sh/cmd script.
#       Note: -ci is always passed
#   beforeBuild: [steps]
#       Additional steps to run before build.sh/cmd
#   afterBuild: [steps]
#       Additional steps to run after build.sh/cmd
#   artifacts:
#      publish: boolean
#           Should artifacts be published
#      path: string
#           The file path to artifacts output
#      name: string
#           The name of the artifact container
#   matrix: { string: { string: string } }
#     A map of matrix configurations and variables. https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema?view=vsts#matrix
#   demands: string | [ string ]
#     A list of agent demands. https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema?view=vsts#demands
#   dependsOn: string | [ string ]
#     For fan-out/fan-in. https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema?view=vsts#phase

#
# See https://docs.microsoft.com/en-us/vsts/pipelines/yaml-schema for details
#

parameters:
  agentOs: 'Windows'
  # phaseName: ''
  queueName: ''
  buildArgs: ''
  configuration: 'Release'
  demands: []
  beforeBuild: []
  afterBuild: []
  dependsOn: ''
  # matrix: {} - don't define an empty object default because there is no way in template expression yet to check "if isEmpty(parameters.matrix)"
  artifacts:
    publish: true
    path: 'artifacts/build/'  # TODO: this is going to change when we converge with dotnet/arcade tooling

phases:
- phase: ${{ coalesce(parameters.phaseName, parameters.agentOs) }}
  dependsOn: ${{ parameters.dependsOn }}
  queue:
    # If a matrix of builds has been configured, run the matrix in parallel
    ${{ if ne(parameters.matrix, '') }}:
      parallel: 4 # Pick 4 as the default because we usually don't have a matrix of more than 4 configs, and there is no way to say parallel: all
      matrix: ${{ parameters.matrix }}
    # Map friendly OS names to the right queue
    ${{ if ne(parameters.queueName, '') }}:
      name: ${{ parameters.queueName }}
    ${{ if and(eq(parameters.queueName, ''), eq(parameters.agentOs, 'macOS')) }}:
      name: Hosted macOS Preview
    ${{ if and(eq(parameters.queueName, ''), eq(parameters.agentOs, 'Linux')) }}:
      name: Hosted Linux Preview
    ${{ if and(eq(parameters.queueName, ''), eq(parameters.agentOs, 'Windows')) }}:
      name: Hosted VS2017
    demands: ${{ parameters.demands }}
  variables:
    AgentOsName: ${{ parameters.agentOs }}
    DOTNET_HOME: $(Agent.WorkFolder)/.dotnet
    BuildScriptArgs: ${{ parameters.buildArgs }}
    BuildConfiguration: ${{ parameters.configuration }}
    ${{ insert }}: ${{ parameters.variables }}
  steps:
  - checkout: self
    clean: true
  - ${{ parameters.beforeBuild }}
  - ${{ if eq(parameters.agentOs, 'Windows') }}:
    - script: .\build.cmd -ci /p:Configuration=$(BuildConfiguration) $(BuildScriptArgs)
      displayName: Run build.cmd
  - ${{ if ne(parameters.agentOs, 'Windows') }}:
    - script: ./build.sh -ci -p:Configuration=$(BuildConfiguration) $(BuildScriptArgs)
      displayName: Run build.sh
  - task: PublishTestResults@2
    displayName: Publish test results
    condition: always()
    inputs:
      testRunner: vstest
      testResultsFiles: 'artifacts/logs/**/*.trx'
  - ${{ if eq(parameters.artifacts.publish, 'true') }}:
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
      inputs:
        pathtoPublish: ${{ parameters.artifacts.path }}
        ${{ if eq(parameters.artifacts.name, '') }}:
          artifactName: artifacts-$(AgentOsName)-$(BuildConfiguration)
        ${{ if ne(parameters.artifacts.name, '') }}:
          artifactName: ${{ parameters.artifacts.name }}
        artifactType: Container
  - ${{ parameters.afterBuild }}

