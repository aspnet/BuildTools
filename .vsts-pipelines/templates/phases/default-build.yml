# default-build.yml
# Description: Defines a build phase for invoking build.sh/cmd
# Parameters:
#   agentOs: [Windows (default), Linux, macOS]
#       Used in templates to define variables which are OS specific
#   buildArgs: string
#       Additional arguments to pass to the build.sh/cmd script.
#       Note: -ci is always passed
#   beforeBuild: [steps]
#       Additional steps to run before build.sh/cmd
#   afterBuild: [steps]
#       Additional steps to run after build.sh/cmd

parameters:
  agentOs: 'Windows'
  configuration: 'Release'
  buildArgs: ''
  beforeBuild: []
  afterBuild: []

phases:
- phase: ${{ format('{0}:{1}', parameters.agentOs, parameters.configuration) }}
  queue:
    ${{ if eq(parameters.agentOs, 'macOS') }}:
      name: Hosted macOS Preview
    ${{ if eq(parameters.agentOs, 'Linux') }}:
      name: Hosted Linux Preview
    ${{ if eq(parameters.agentOs, 'Windows') }}:
      name: Hosted VS2017
  variables:
    Build.ScriptArgs: ${{ parameters.buildArgs }}
    Build.Configuration: ${{ parameters.configuration }}
    DOTNET_HOME: $(Agent.WorkFolder)/.dotnet
  steps:
  - checkout: self
    clean: true
  - ${{ parameters.beforeBuild }}
  - ${{ if eq(parameters.agentOs, 'Windows') }}:
    - script: .\build.cmd -ci /p:Configuration=$(Build.Configuration) $(Build.ScriptArgs)
      displayName: Run build.cmd
  - ${{ if ne(parameters.agentOs, 'Windows') }}:
    - script: ./build.sh -ci -p:Configuration=$(Build.Configuration) $(Build.ScriptArgs)
      displayName: Run build.sh
  - task: PublishTestResults@2
    displayName: Publish test results
    condition: always()
    inputs:
      testRunner: vstest
      testResultsFiles: 'artifacts/logs/**/*.trx'
  - ${{ if and(eq(parameters.agentOs, 'Windows'), ne(parameters.artifactsPath, '')) }}:
    - task: PublishBuildArtifacts@1
      displayName: Upload artifacts
      condition: and(succeeded(), eq(variables['system.pullrequest.isfork'], false))
      inputs:
        pathtoPublish: artifacts/build/ # TODO: this is going to change when we converge with dotnet/arcade tooling
        artifactName: ${{ format('packages-{0}-{1}', parameters.agentOs, parameters.configuration) }}
        artifactType: Container
  - ${{ parameters.afterBuild }}

