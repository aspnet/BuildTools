<Project>

<!--
###################################################################
Standard lifecycle properties.

This is intentionally in .targets as these properties are evaluated
after all other property imports.
###################################################################
-->
  <PropertyGroup Condition=" '$(Version)' == '' ">
    <VersionPrefix Condition=" '$(VersionPrefix)' == '' ">1.0.0</VersionPrefix>
    <Version Condition=" '$(VersionSuffix)' != '' ">$(VersionPrefix)-$(VersionSuffix)</Version>
    <Version Condition=" '$(Version)' == '' ">$(VersionPrefix)</Version>
  </PropertyGroup>

  <PropertyGroup>
    <PackageVersion Condition="'$(PackageVersion)' == '' AND '$(Version)' != '' ">$(Version)</PackageVersion>
    <BuildProperties>$(BuildProperties);RepoVersion=$(Version);RepoPackageVersion=$(PackageVersion)</BuildProperties>
    <BuildProperties Condition=" ! Exists('$(RepositoryRoot)version.props') ">$(BuildProperties);VerifyVersion=false</BuildProperties>
  </PropertyGroup>

<!--
###################################################################
Standard lifecycle targets.

When extending the solution build, chain off one of these by
extending the *DependsOn property
###################################################################
-->

  <!-- Default cycle targets, in order. -->
  <Target Name="Prepare" DependsOnTargets="$(PrepareDependsOn)" />
  <Target Name="Restore" DependsOnTargets="$(RestoreDependsOn)" />
  <Target Name="Compile" DependsOnTargets="$(CompileDependsOn)" />
  <Target Name="Package" DependsOnTargets="$(PackageDependsOn)" />
  <Target Name="Test"    DependsOnTargets="$(TestDependsOn)" />
  <Target Name="Verify"  DependsOnTargets="$(VerifyDependsOn)" />
  <Target Name="Build"   DependsOnTargets="$(BuildDependsOn)" />

  <!-- Additional common targets. -->
  <Target Name="Clean"   DependsOnTargets="$(CleanDependsOn)" />
  <Target Name="Rebuild" DependsOnTargets="$(RebuildDependsOn)" />

  <Target Name="GetRepoInfo" Returns="@(RepoInfo)">
    <ItemGroup>
      <RepoInfo Include="$(RepositoryRoot)">
        <Version>$(Version)</Version>
        <PackageVersion>$(PackageVersion)</PackageVersion>
        <BuildNumber>$(BuildNumber)</BuildNumber>
      </RepoInfo>
    </ItemGroup>
  </Target>

  <!-- For external analysis of inputs/outputs. -->
  <Target Name="GetArtifactInfo" DependsOnTargets="$(GetArtifactInfoDependsOn)" Returns="@(ArtifactInfo)" />

  <!-- Commonly used targets -->
  <PropertyGroup Condition="'$(DisableDefaultTargets)' != 'true'">
    <PrepareDependsOn>$(PrepareDependsOn);_PrepareOutputPaths</PrepareDependsOn>
    <RestoreDependsOn>_BeforeRestore;$(RestoreDependsOn)</RestoreDependsOn>
    <CleanDependsOn>$(CleanDependsOn);CleanArtifacts</CleanDependsOn>
    <GetArtifactInfoDependsOn>$(GetArtifactInfoDependsOn);GetProjectArtifactInfo</GetArtifactInfoDependsOn>
  </PropertyGroup>

  <Target Name="_BeforeRestore">
    <Warning Text="Restore is skipped because 'NoRestore' == 'true'" Condition="'$(NoRestore)' == 'true'" />
  </Target>

  <Target Name="CleanArtifacts">
    <RemoveDir Directories="$(BuildDir);$(IntermediateDir)" />
    <ItemGroup>
      <_FilesToDelete Include="$(ArtifactsDir)**\*" Exclude="$(LogOutputDir)**\*" />
    </ItemGroup>
    <Delete Files="@(_FilesToDelete)" />
  </Target>

  <Target Name="_PrepareOutputPaths">
    <MakeDir Directories="$(ArtifactsDir);$(BuildDir)" />
  </Target>

  <Target Name="GetProjectArtifactInfo" Returns="@(ArtifactInfo)">
    <PropertyGroup>
      <_InspectionTargetsFile>$(MSBuildThisFileDirectory)Project.Inspection.targets</_InspectionTargetsFile>
    </PropertyGroup>

    <ItemGroup>
      <_Temp Remove="@(_Temp)" />
    </ItemGroup>

    <MSBuild Targets="GetArtifactInfo"
             Projects="@(ProjectToBuild)"
             Condition="@(ProjectToBuild->Count()) != 0"
             Properties="$(BuildProperties);EnableApiCheck=false;NoBuild=true;RepositoryRoot=$(RepositoryRoot);PackageOutputPath=$(BuildDir);CustomAfterMicrosoftCommonTargets=$(_InspectionTargetsFile);CustomAfterMicrosoftCommonCrossTargetingTargets=$(_InspectionTargetsFile)"
             BuildInParallel="$(BuildInParallel)"
             RemoveProperties="$(_BuildPropertiesToRemove)">

      <Output TaskParameter="TargetOutputs" ItemName="_Temp" />
    </MSBuild>

    <ItemGroup>
      <!-- Output from this target may include items representing assemblies inside the nupkg. -->
      <ArtifactInfo Include="@(_Temp)" Condition="'%(_Temp.Container)' == ''" />

      <!-- Nupkgs or assemblies in the nupkg that should be signed -->
      <FilesToSign Include="@(_Temp)" Condition=" '%(_Temp.ShouldBeSigned)' == 'true' " />

      <!-- Nupkgs or assemblies in the nupkg that should not be signed -->
      <FilesToExcludeFromSigning Include="@(_Temp)" Condition=" '%(_Temp.ShouldBeSigned)' != 'true' " />
    </ItemGroup>
  </Target>

</Project>
