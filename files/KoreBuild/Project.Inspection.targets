<Project>

  <Target Name="GetArtifactInfo"
          DependsOnTargets="GetSignedPackageFiles;GetPackageFilesExcludedFromSigning"
          Returns="@(ArtifactInfo)">

    <PropertyGroup>
      <NormalizedPackageVersion>$(PackageVersion)</NormalizedPackageVersion>
      <!-- Strip version metadata -->
      <NormalizedPackageVersion Condition="$(NormalizedPackageVersion.Contains('+'))">$(PackageVersion.Substring(0, $(PackageVersion.IndexOf('+'))))</NormalizedPackageVersion>
      <FullPackageOutputPath>$(PackageOutputPath)$(PackageId).$(NormalizedPackageVersion).nupkg</FullPackageOutputPath>
      <SymbolsPackageOutputPath>$(PackageOutputPath)$(PackageId).$(NormalizedPackageVersion).symbols.nupkg</SymbolsPackageOutputPath>

      <!-- Detect if Internal.AspNetCore.Sdk is referenced -->
      <_ReferencesInternalAspNetCoreSdk Condition="'$(_ReferencesInternalAspNetCoreSdk)' == ''">@(PackageReference->AnyHaveMetadataValue('Identity', 'Internal.AspNetCore.Sdk'))</_ReferencesInternalAspNetCoreSdk>
      <!-- If _ReferencesInternalAspNetCoreSdk is still empty, it means there are no package references, so it should be false -->
      <_ReferencesInternalAspNetCoreSdk Condition="'$(_ReferencesInternalAspNetCoreSdk)' == ''">false</_ReferencesInternalAspNetCoreSdk>

      <!--
        Workaround for design time builds on projects using Internal.AspNetCore.Sdk that have not yet been restored.
        IncludeSymbols and IncludeSource are off by default but are enabled in Internal.AspNetCore.Sdk.
      -->
      <IncludeSymbols Condition="'$(IncludeSymbols)' == '' AND $(_ReferencesInternalAspNetCoreSdk)">true</IncludeSymbols>
      <IncludeSource Condition="'$(IncludeSource)' == '' AND $(_ReferencesInternalAspNetCoreSdk)">true</IncludeSource>
    </PropertyGroup>

    <ConvertToAbsolutePath Paths="@(SignedPackageFile)">
      <Output TaskParameter="AbsolutePaths" ItemName="_SignedPackageFile" />
    </ConvertToAbsolutePath>

    <ConvertToAbsolutePath Paths="@(ExcludePackageFileFromSigning)">
      <Output TaskParameter="AbsolutePaths" ItemName="_ExcludePackageFileFromSigning" />
    </ConvertToAbsolutePath>

    <ItemGroup Condition="'$(IsPackable)' != 'false' ">
      <ArtifactInfo Include="$(FullPackageOutputPath)">
        <ArtifactType>NuGetPackage</ArtifactType>
        <PackageId>$(PackageId)</PackageId>
        <Version>$(NormalizedPackageVersion)</Version>
        <TargetFramework>$(TargetFramework)</TargetFramework>
        <TargetFrameworks>$([MSBuild]::Escape($(TargetFrameworks)))</TargetFrameworks>
        <PackageType>$(PackageType)</PackageType>
        <RepositoryRoot>$(RepositoryRoot)</RepositoryRoot>
        <RepoRoot>$(RepoRoot)</RepoRoot>
        <RepositoryUrl>$(RepositoryUrl)</RepositoryUrl>
        <Category>$(PackageArtifactCategory)</Category>
        <Certificate>$(PackageSigningCertName)</Certificate>
        <ShouldBeSigned Condition="'$(PackageSigningCertName)' != '' OR @(_SignedPackageFile->Count()) != 0 ">true</ShouldBeSigned>
        <ShouldBeSigned Condition=" '$(DisableCodeSigning)' == 'true' ">false</ShouldBeSigned>
        <IsContainer>true</IsContainer>
      </ArtifactInfo>

      <ArtifactInfo Include="$(SymbolsPackageOutputPath)" Condition="'$(IncludeSymbols)' == 'true' ">
        <ArtifactType>NuGetSymbolsPackage</ArtifactType>
        <PackageId>$(PackageId)</PackageId>
        <Version>$(NormalizedPackageVersion)</Version>
        <TargetFramework>$(TargetFramework)</TargetFramework>
        <TargetFrameworks>$([MSBuild]::Escape($(TargetFrameworks)))</TargetFrameworks>
        <SourceIncluded>$(IncludeSource)</SourceIncluded>
        <PackageType>$(PackageType)</PackageType>
        <RepositoryRoot>$(RepositoryRoot)</RepositoryRoot>
        <RepoRoot>$(RepoRoot)</RepoRoot>
        <RepositoryUrl>$(RepositoryUrl)</RepositoryUrl>
        <Category>$(PackageArtifactCategory)</Category>
        <Certificate>$(PackageSigningCertName)</Certificate>
        <ShouldBeSigned Condition="'$(SignSymbolsNupkg)' == 'true' AND ('$(PackageSigningCertName)' != '' OR @(_SignedPackageFile->Count()) != 0) ">true</ShouldBeSigned>
        <ShouldBeSigned Condition=" '$(DisableCodeSigning)' == 'true' ">false</ShouldBeSigned>
        <IsContainer>true</IsContainer>
      </ArtifactInfo>
    </ItemGroup>

    <!-- Still return metadata about signable package contents when producing a servicing build. -->
    <ItemGroup Condition="'$(IsPackable)' != 'false' OR '$(IsPackableInNonServicingBuild)' == 'true' ">
      <ArtifactInfo Include="@(_SignedPackageFile)" Condition=" '$(DisableCodeSigning)' != 'true' ">
        <ShouldBeSigned>true</ShouldBeSigned>
        <Container>$(FullPackageOutputPath)</Container>
      </ArtifactInfo>

      <ArtifactInfo Include="@(_ExcludePackageFileFromSigning)">
        <ShouldBeSigned>false</ShouldBeSigned>
        <Container>$(FullPackageOutputPath)</Container>
      </ArtifactInfo>

      <ArtifactInfo Include="@(_SignedPackageFile)" Condition=" '$(DisableCodeSigning)' != 'true' AND '$(IncludeSymbols)' == 'true' AND '$(SignSymbolsNupkg)' == 'true' ">
        <ShouldBeSigned>true</ShouldBeSigned>
        <Container>$(SymbolsPackageOutputPath)</Container>
      </ArtifactInfo>

      <ArtifactInfo Include="@(_ExcludePackageFileFromSigning)" Condition="'$(IncludeSymbols)' == 'true' ">
        <ShouldBeSigned>false</ShouldBeSigned>
        <Container>$(SymbolsPackageOutputPath)</Container>
      </ArtifactInfo>
    </ItemGroup>

  </Target>

<!--
####################################################################################
Target: GetPackageFilesExcludedFromSigning

Collect ExcludePackageFileFromSigning items in multi-TFM projects

Items:
[out] ExcludePackageFileFromSigning
#####################################################################################
-->
  <PropertyGroup>
    <!-- For single-TFM projects -->
    <GetPackageFilesExcludedFromSigningDependsOn Condition=" '$(TargetFramework)' != '' ">
      _GetPackageFilesExcludedFromSigning
    </GetPackageFilesExcludedFromSigningDependsOn>
  </PropertyGroup>

  <Target Name="GetPackageFilesExcludedFromSigning" DependsOnTargets="$(GetPackageFilesExcludedFromSigningDependsOn)" Returns="@(ExcludePackageFileFromSigning)">

    <ItemGroup Condition=" '$(TargetFramework)' == '' ">
      <_TargetFrameworks Remove="@(_TargetFrameworks)" />
      <_TargetFrameworks Include="$(TargetFrameworks)" />
    </ItemGroup>

    <MSBuild Projects="$(MSBuildProjectFullPath)"
      Properties="TargetFramework=%(_TargetFrameworks.Identity)"
      Targets="GetPackageFilesExcludedFromSigning"
      Condition=" '%(_TargetFrameworks.Identity)' != '' AND '$(TargetFramework)' == '' "
      BuildInParallel="true">
      <Output TaskParameter="TargetOutputs" ItemName="ExcludePackageFileFromSigning" />
    </MSBuild>
  </Target>

  <Target Name="_GetPackageFilesExcludedFromSigning"
          Condition=" '$(TargetFramework)' != '' AND '$(DisableCodeSigning)' != 'true' "
          Returns="@(ExcludePackageFileFromSigning)" />

<!--
####################################################################################
Target: GetSignedPackageFiles

Gets items for built assemblies that will be in the NuGet package.
Also supports projects that explicitly set items in the SignedPackageFile group.

Items:
[out] SignedPackageFile
#####################################################################################
-->
  <PropertyGroup>
    <!-- For single-TFM projects -->
    <GetSignedPackageFilesDependsOn Condition=" '$(TargetFramework)' != '' ">
      _GetSignedPackageFiles
    </GetSignedPackageFilesDependsOn>
  </PropertyGroup>

  <Target Name="GetSignedPackageFiles" DependsOnTargets="$(GetSignedPackageFilesDependsOn)" Returns="@(SignedPackageFile)">

    <ItemGroup Condition=" '$(TargetFramework)' == '' ">
      <_TargetFrameworks Remove="@(_TargetFrameworks)" />
      <_TargetFrameworks Include="$(TargetFrameworks)" />
    </ItemGroup>

    <MSBuild Projects="$(MSBuildProjectFullPath)"
      Properties="TargetFramework=%(_TargetFrameworks.Identity)"
      Targets="GetSignedPackageFiles"
      Condition=" '%(_TargetFrameworks.Identity)' != '' AND '$(TargetFramework)' == '' "
      BuildInParallel="true">
      <Output TaskParameter="TargetOutputs" ItemName="SignedPackageFile" />
    </MSBuild>
  </Target>

  <Target Name="_GetSignedPackageFiles"
          Condition=" '$(TargetFramework)' != '' AND '$(DisableCodeSigning)' != 'true' "
          DependsOnTargets="BuiltProjectOutputGroup;SatelliteDllsProjectOutputGroup">

    <PropertyGroup>
      <_PackageBasePath>$(BuildOutputTargetFolder.TrimEnd('/'))</_PackageBasePath>
      <_PackageBasePath>$(_PackageBasePath.TrimEnd('\'))</_PackageBasePath>
      <_IsTestProject Condition=" '$(IsTestProject)' == 'true' OR ('$(IsTestProject)' == '' AND @(PackageReference->WithMetadataValue('Identity', 'Microsoft.NET.Test.Sdk')->Count()) != 0)">true</_IsTestProject>
    </PropertyGroup>

    <ItemGroup Condition=" '$(_IsTestProject)' != 'true' AND '$(NuspecFile)' == '' AND '$(IncludeBuildOutput)' != 'false' AND ('$(AssemblySigningCertName)' != '' OR '$(AssemblySigningStrongName)' != '') ">
      <SignedPackageFile Include="@(BuiltProjectOutputGroupOutput)" Condition="'%(BuiltProjectOutputGroupOutput.Extension)' == '.dll' OR '%(BuiltProjectOutputGroupOutput.Extension)' == '.exe'">
        <PackagePath>$(_PackageBasePath)/$(TargetFramework)/%(BuiltProjectOutputGroupOutput.FileName)%(BuiltProjectOutputGroupOutput.Extension)</PackagePath>
        <Certificate>$(AssemblySigningCertName)</Certificate>
        <StrongName>$(AssemblySigningStrongName)</StrongName>
      </SignedPackageFile>

      <SignedPackageFile Include="@(SatelliteDllsProjectOutputGroupOutput)" Condition="'%(SatelliteDllsProjectOutputGroupOutput.Extension)' == '.dll' OR '%(SatelliteDllsProjectOutputGroupOutput.Extension)' == '.exe'">
        <PackagePath>$(_PackageBasePath)/$(TargetFramework)/%(SatelliteDllsProjectOutputGroupOutput.FileName)%(SatelliteDllsProjectOutputGroupOutput.Extension)</PackagePath>
        <Certificate>$(AssemblySigningCertName)</Certificate>
        <StrongName>$(AssemblySigningStrongName)</StrongName>
      </SignedPackageFile>
    </ItemGroup>
  </Target>

</Project>
