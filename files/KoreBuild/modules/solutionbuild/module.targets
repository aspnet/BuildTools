<!--
FYI: targets, properties, and items that begin with an underscore are meant to be internal.
     They are subject to change. Overriding these may break these targets.
-->
<Project>

  <PropertyGroup>
    <BuildSolutions Condition=" '$(DisableDefaultTargets)' != 'true' AND '$(BuildSolutions)' == '' ">true</BuildSolutions>
  </PropertyGroup>

  <ItemGroup Condition="'$(DisableDefaultItems)' != 'true' AND '$(BuildSolutions)' == 'true' ">
    <Solutions Include="$(RepositoryRoot)*.sln" Exclude="@(ExcludeSolutions)" />
    <ProjectsToPack Include="$(RepositoryRoot)src\*\*.csproj" Exclude="@(ExcludeFromPack)" />

    <!-- put unit test projects ahead of functional tests -->
    <_FunctionalTests Include="$(RepositoryRoot)test\*\*FunctionalTest*.csproj" Exclude="@(ExcludeFromTest)" />
    <ProjectsToTest Include="$(RepositoryRoot)test\*\*.csproj" Exclude="@(_FunctionalTests);@(ExcludeFromTest)" />
    <ProjectsToTest Include="@(_FunctionalTests)"  />
    <BenchmarksToValidate Include="$(RepositoryRoot)benchmarks\*\*.csproj" />

  </ItemGroup>

  <PropertyGroup Condition=" '$(BuildSolutions)' == 'true' ">
    <RestoreDependsOn>$(RestoreDependsOn);RestoreSolutions</RestoreDependsOn>
    <CompileDependsOn>$(CompileDependsOn);BuildSolutions</CompileDependsOn>
    <PackageDependsOn>$(PackageDependsOn);PackageProjectsToPack</PackageDependsOn>
    <CleanDependsOn>$(CleanDependsOn);CleanSolutions</CleanDependsOn>
    <RebuildDependsOn>$(RebuildDependsOn);RebuildSolutions</RebuildDependsOn>
  </PropertyGroup>

<!--
###################################################################
Targets: {Target}Solutions

Items: Solutions
Properties: ExcludeSolutions

Executes /t:{Target} on all solutions
###################################################################
-->
  <PropertyGroup Condition=" '$(BuildSolutions)' == 'true' ">
    <_SolutionWasBuilt>false</_SolutionWasBuilt>
    <!-- ensure its value doesn't invalidate MSBuild build cache -->
    <_BuildPropertiesToRemove>$(_BuildPropertiesToRemove);_SolutionWasBuilt</_BuildPropertiesToRemove>

    <BuildInParallel>true</BuildInParallel>
  </PropertyGroup>

  <Target Name="ResolveSolutions" Returns="@(Solutions)">
    <ItemGroup>
      <_Temp Remove="@(_Temp)" />
      <_Temp Include="@(Solutions)"/>
      <Solutions Remove="@(Solutions)" />
    </ItemGroup>

    <RemoveDuplicates Inputs="@(_Temp)">
      <Output TaskParameter="Filtered" ItemName="Solutions" />
    </RemoveDuplicates>

    <PropertyGroup>
      <SolutionProperties>$(SolutionProperties);$(BuildProperties)</SolutionProperties>
    </PropertyGroup>
  </Target>

  <Target Name="_EnsureSolutions">
    <Error Text="No solutions found to build in '$(RepositoryRoot)'" Condition="@(Solutions->Count()) == 0" />
  </Target>

  <Target Name="RestoreSolutions" DependsOnTargets="ResolveSolutions;_EnsureSolutions" Condition="'$(NoRestore)' != 'true'">
    <!--
      Added _SolutionTarget to invalidate subsequent MSBuild calls on the solution.
      MSBuild incorrectly caches some solution target.
    -->
    <MSBuild Targets="Restore"
      Projects="@(Solutions)"
      Properties="$(SolutionProperties);_SolutionTarget=Restore"
      RemoveProperties="$(_BuildPropertiesToRemove)"
      BuildInParallel="$(BuildInParallel)" />
  </Target>

  <Target Name="CleanSolutions" DependsOnTargets="ResolveSolutions;_EnsureSolutions">
    <!--
      Added _SolutionTarget to invalidate subsequent MSBuild calls on the solution.
      MSBuild incorrectly caches the "Clean" target.
    -->
    <MSBuild Targets="Clean"
      Projects="@(Solutions)"
      Properties="$(SolutionProperties);_SolutionTarget=Clean"
      BuildInParallel="$(BuildInParallel)"
      RemoveProperties="$(_BuildPropertiesToRemove)" />
  </Target>

  <Target Name="BuildSolutions" DependsOnTargets="ResolveSolutions;_EnsureSolutions">
    <MSBuild Targets="Build"
      Projects="@(Solutions)"
      Properties="$(SolutionProperties)"
      BuildInParallel="$(BuildInParallel)"
      RemoveProperties="$(_BuildPropertiesToRemove)" />

    <PropertyGroup>
      <_SolutionWasBuilt>true</_SolutionWasBuilt>
    </PropertyGroup>
  </Target>

  <Target Name="RebuildSolutions" DependsOnTargets="ResolveSolutions;_EnsureSolutions">
    <MSBuild Targets="Rebuild"
      Projects="@(Solutions)"
      RemoveProperties="$(_BuildPropertiesToRemove)"
      BuildInParallel="$(BuildInParallel)" />

    <PropertyGroup>
      <_SolutionWasBuilt>true</_SolutionWasBuilt>
    </PropertyGroup>
  </Target>

<!--
###################################################################
Target: PackageProjectsToPack

Executes /t:Pack on all projects matching src/*/*.csproj.
###################################################################
-->
  <Target Name="PackageProjectsToPack" DependsOnTargets="ResolveSolutions">
    <PropertyGroup>
      <PackProperties>$(SolutionProperties);PackageOutputPath=$(BuildDir);</PackProperties>
      <PackProperties Condition="'$(_SolutionWasBuilt)' == 'true'">$(PackProperties);NoBuild=true;BuildProjectReferences=false</PackProperties>
    </PropertyGroup>

    <MSBuild Targets="Pack"
      Projects="@(ProjectsToPack)"
      Condition="@(ProjectsToPack->Count()) != 0"
      Properties="$(PackProperties)"
      BuildInParallel="$(BuildInParallel)"
      RemoveProperties="$(_BuildPropertiesToRemove)" />
  </Target>

  <!-- For backwards compatibility with solution build, this maps ProjectsToTest to an internal item group. -->
  <Target Name="CollectProjectsToTest" BeforeTargets="GetTestAssemblies">
    <ItemGroup>
      <ProjectToBuild Include="@(ProjectsToTest)" />
    </ItemGroup>
  </Target>

  <!-- For backwards compatibility with solution build, this maps ProjectsToPack to an internal item group. -->
  <Target Name="CollectProjectsToPackArtifactInfo" BeforeTargets="GetProjectArtifactInfo">
    <ItemGroup>
      <ProjectToBuild Include="@(ProjectsToPack)" />
    </ItemGroup>
  </Target>

</Project>
