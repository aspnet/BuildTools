<Project>

  <ItemGroup>
    <!-- put unit test projects ahead of functional tests -->
    <_FunctionalTests Include="$(RepositoryRoot)test\*\*FunctionalTest*.csproj" Exclude="@(ExcludeFromTest)" />
    <ProjectsToTest Include="$(RepositoryRoot)test\*\*.csproj" Exclude="@(_FunctionalTests);@(ExcludeFromTest)" />
    <ProjectsToTest Include="@(_FunctionalTests)"  />
    <BenchmarksToValidate Include="$(RepositoryRoot)benchmarks\*\*.csproj" />
  </ItemGroup>

<!--
###################################################################
Target: TestProjects

Items: ProjectsToTest. Defaults to test/*/*.csproj
Properties: ExcludeFromTest. ItemSpec for projects to avoid testing.

Runs the VSTest on all projects in the ProjectsToTest itemgroup.
###################################################################
-->
  <PropertyGroup>
    <TestDependsOn Condition="'$(DisableDefaultTargets)' != 'true'">$(TestDependsOn);TestProjects;ValidateBenchmarks</TestDependsOn>
    <IgnoreFailingTestProjects>false</IgnoreFailingTestProjects>
    <IgnoreFailingTestProjects Condition="'$(KOREBUILD_IGNORE_DOTNET_TEST_EXIT_CODE)' == '1'">true</IgnoreFailingTestProjects>
  </PropertyGroup>

  <Target Name="GetTestAssemblies" DependsOnTargets="ResolveSolutions" Returns="@(TestAssembly)">
    <PropertyGroup>
      <_InspectionTargetsFile>$(MSBuildThisFileDirectory)Project.Inspection.targets</_InspectionTargetsFile>
    </PropertyGroup>

    <MSBuild Projects="@(ProjectsToTest)"
      Targets="GetTestAssembly"
      Properties="$(SolutionProperties);CustomAfterMicrosoftCommonTargets=$(_InspectionTargetsFile);CustomAfterMicrosoftCommonCrossTargetingTargets=$(_InspectionTargetsFile);%(ProjectsToTest.AdditionalProperties)"
      Condition="@(ProjectsToTest->Count()) != 0"
      BuildInParallel="true"
      RemoveProperties="$(_BuildPropertiesToRemove)">
      <Output TaskParameter="TargetOutputs" ItemName="TestAssembly" />
    </MSBuild>
  </Target>

  <Target Name="TestProjects" DependsOnTargets="GetTestAssemblies">
    <PropertyGroup>
      <_TestContinueOnError Condition="'$(IgnoreFailingTestProjects)' == 'true'">ErrorAndContinue</_TestContinueOnError>
      <_TestContinueOnError Condition="'$(IgnoreFailingTestProjects)' != 'true'">ErrorAndStop</_TestContinueOnError>
    </PropertyGroup>

    <Message Text="%0ATest plan:" Importance="High" />
    <Message Text="  - %(TestAssembly.TestGroupName)/%(TestAssembly.TargetFramework)%0A    - @(TestAssembly->'%(FileName)', '%0A    - ')" Importance="High" Condition="@(TestAssembly->Count()) != 0" />
    <Message Text="  - (No test projects found)" Importance="High" Condition="@(TestAssembly->Count()) == 0"  />

    <ItemGroup>
      <TestGroups Include="$(MSBuildProjectFullPath)" Condition="'%(TestAssembly.TestGroupName)' != ''">
        <AdditionalProperties>Assemblies=@(TestAssembly);TestGroupName=%(TestAssembly.TestGroupName);TargetFramework=%(TestAssembly.TargetFramework);TargetFrameworkIdentifier=%(TestAssembly.TargetFrameworkIdentifier);TargetFrameworkVersion=%(TestAssembly.TargetFrameworkVersion)</AdditionalProperties>
      </TestGroups>
    </ItemGroup>

    <MSBuild Projects="@(TestGroups)"
             Targets="_ExecuteTestAssemblies"
             Condition="@(TestGroups->Count()) != 0"
             BuildInParallel="false"
             ContinueOnError="$(_TestContinueOnError)" />
  </Target>

  <!-- The 'inner-build' -->
  <PropertyGroup>
    <TrxFile>$(LogOutputDir)$(TestGroupName)-$(TargetFramework)-$(BuildNumber).trx</TrxFile>
    <VSTestLogger Condition=" '$(VSTestLogger)' == '' AND '$(CI)' == 'true' ">trx;LogFileName=$(TrxFile)</VSTestLogger>
    <VSTestDiagFile Condition=" '$(VSTestVerboseOutput)' == 'true'">$(LogOutputDir)$(TestGroupName)-$(TargetFramework)-$(BuildNumber).diag</VSTestDiagFile>
    <!--
      Disable other test reporters if trx logging is enabled.
    -->
    <VSTestAutoReporters Condition=" '$(VSTestAutoReporters)' == '' AND '$(VSTestLogger)' != '' ">false</VSTestAutoReporters>
    <VSTestAutoReporters Condition=" '$(VSTestAutoReporters)' == '' ">true</VSTestAutoReporters>
  </PropertyGroup>

  <Target Name="_ExecuteTestAssemblies">
    <ItemGroup>
      <TestAssemblies Include="$(Assemblies)" />
    </ItemGroup>

    <PropertyGroup>
      <TestAdapterPath>%(TestAssemblies.RootDir)%(TestAssemblies.Directory)</TestAdapterPath>
    </PropertyGroup>

    <ItemGroup>
      <VSTestArgs Remove="@(VSTestArgs)" />
      <VSTestArgs Include="vstest" />
      <VSTestArgs Include="--Parallel" />
      <VSTestArgs Include="--Blame" Condition="'$(VSTestBlame)' == 'true'" />
      <VSTestArgs Include="--Diag:$([MSBuild]::Escape($(VSTestDiagFile)))" Condition="'$(VSTestDiagFile)' != ''" />
      <VSTestArgs Include="--Framework:$(TargetFrameworkIdentifier),Version=v$(TargetFrameworkVersion)" />
      <VSTestArgs Include="--Logger:$([MSBuild]::Escape($(VSTestLogger)))" Condition="'$(VSTestLogger)' != ''" />
      <VSTestArgs Include="--TestAdapterPath:$(TestAdapterPath)" Condition=" '$(TargetFrameworkIdentifier)' == '.NETFramework' " />
      <VSTestArgs Include="@(TestAssemblies)" />
      <VSTestArgs Include="--;RunConfiguration.NoAutoReporters=true" Condition="'$(VSTestAutoReporters)' != 'true'" />
    </ItemGroup>

    <Message Text="%0AStarting test group: $(TestGroupName)/$(TargetFramework)" Importance="High" />

    <RunDotNet Arguments="@(VSTestArgs)" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true">
      <Output TaskParameter="ExitCode" PropertyName="VsTestExitCode" />
    </RunDotNet>

    <Message Text="##teamcity[importData type='vstest' verbose='false' path='$(TrxFile)']"
      Importance="High"
      Condition="'$(TEAMCITY_VERSION)' != '' AND Exists($(TrxFile))" />
    <Error Text="Test group $(TestGroupName)/$(TargetFramework) failed with exit code '$(VsTestExitCode)'." Condition=" $(VsTestExitCode) != 0 " />
  </Target>

  <Target Name="ValidateBenchmarks" DependsOnTargets="ResolveSolutions" Condition=" '$(EnableBenchmarkValidation)' == 'true' ">

    <Message Text="%0ARunning benchmark validation for:%0A@(BenchmarksToValidate -> '%(FileName)','%0A')%0A"
      Importance="High"
      Condition="'@(BenchmarksToValidate)' != ''" />

    <MSBuild Projects="%(BenchmarksToValidate.Identity)" Targets="GetTargetPath" Properties="$(SolutionProperties)">
      <Output TaskParameter="TargetOutputs" ItemName="BenchmarkExecPath" />
    </MSBuild>

    <RunDotNet Condition="'%(BenchmarkExecPath.TargetFrameworkIdentifier)' == '.NETCoreApp'"
      Arguments="%(BenchmarkExecPath.Identity);*;--validate-fast" />
    <Run Condition="'%(BenchmarkExecPath.TargetFrameworkIdentifier)' == '.NETFramework'"
      FileName="%(BenchmarkExecPath.Identity)" Arguments="*;--validate-fast" />
  </Target>

</Project>
