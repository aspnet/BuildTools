<Project>

<!--
###################################################################
Target: TestProjects

Runs the VSTest on all projects in the ProjectToBuild itemgroup.
###################################################################
-->
  <PropertyGroup>
    <TestDependsOn Condition="'$(DisableDefaultTargets)' != 'true'">$(TestDependsOn);TestProjects</TestDependsOn>
    <IgnoreFailingTestProjects>false</IgnoreFailingTestProjects>
    <IgnoreFailingTestProjects Condition="'$(KOREBUILD_IGNORE_DOTNET_TEST_EXIT_CODE)' == '1'">true</IgnoreFailingTestProjects>
  </PropertyGroup>

  <Target Name="GetTestAssemblies" Returns="@(TestAssembly)">
    <PropertyGroup>
      <_InspectionTargetsFile>$(MSBuildThisFileDirectory)Project.Inspection.targets</_InspectionTargetsFile>
    </PropertyGroup>

    <MSBuild Projects="@(ProjectToBuild)"
      Targets="GetTestAssembly"
      Properties="$(BuildProperties);CustomAfterMicrosoftCommonTargets=$(_InspectionTargetsFile);CustomAfterMicrosoftCommonCrossTargetingTargets=$(_InspectionTargetsFile);%(ProjectToBuild.AdditionalProperties)"
      Condition="@(ProjectToBuild->Count()) != 0"
      SkipNonexistentTargets="true"
      BuildInParallel="true"
      RemoveProperties="$(_BuildPropertiesToRemove)">
      <Output TaskParameter="TargetOutputs" ItemName="TestAssembly" />
    </MSBuild>

    <ItemGroup Condition=" '$(OS)' != 'Windows_NT' ">
      <!-- Skip .NET Framework assemblies on xplat. -->
      <TestAssembly Remove="@(TestAssembly)" Condition=" '%(TargetFrameworkIdentifier)' == '.NETFramework' " />
    </ItemGroup>
  </Target>

  <Target Name="TestProjects" DependsOnTargets="GetTestAssemblies;_ShowTestPlan;_RunTests" />

  <Target Name="_ShowTestPlan" DependsOnTargets="GetTestAssemblies">
    <!-- Detect which tests support running via the VSTest target. -->
    <MSBuild Projects="@(ProjectToBuild)"
      Targets="_IsVsTestSupported "
      Properties="$(BuildProperties);CustomAfterMicrosoftCommonTargets=$(_InspectionTargetsFile);CustomAfterMicrosoftCommonCrossTargetingTargets=$(_InspectionTargetsFile);%(ProjectToBuild.AdditionalProperties)"
      Condition="@(ProjectToBuild->Count()) != 0"
      SkipNonexistentTargets="true"
      BuildInParallel="true"
      RemoveProperties="$(_BuildPropertiesToRemove)">
      <Output TaskParameter="TargetOutputs" ItemName="_ProjectWithSupportVsTest" />
    </MSBuild>

    <ItemGroup>
      <!-- Projects which do not support vstest can still run tests if they implement a 'Test' target. -->
      <_ProjectToTestDirectly Include="@(ProjectToBuild)" Exclude="@(_ProjectWithSupportVsTest)" />
    </ItemGroup>

    <Message Text="%0ATest plan:" Importance="High" />
    <Message Text="  VSTest:" Importance="High" Condition="@(TestAssembly->Count()) != 0" />
    <Message Text="  - %(TestAssembly.TestGroupName)/%(TestAssembly.TargetFramework)%0A    - @(TestAssembly->'%(FileName)', '%0A    - ')" Importance="High" Condition="@(TestAssembly->Count()) != 0" />
    <Message Text="  - (No test projects found)" Importance="High" Condition="@(TestAssembly->Count()) == 0"  />
    <Message Text="  Test:%0A    - @(_ProjectToTestDirectly, '%0A    - ')" Importance="High" Condition="@(_ProjectToTestDirectly->Count()) != 0" />
  </Target>

  <Target Name="_RunTests">
    <PropertyGroup>
      <_TestContinueOnError Condition="'$(IgnoreFailingTestProjects)' == 'true'">ErrorAndContinue</_TestContinueOnError>
      <_TestContinueOnError Condition="'$(IgnoreFailingTestProjects)' != 'true'">ErrorAndStop</_TestContinueOnError>
    </PropertyGroup>

    <ItemGroup>
      <!-- This runs test assemblies through VSTest. -->
      <_TestGroups Include="$(MSBuildProjectFullPath)" Condition="'%(TestAssembly.TestGroupName)' != ''">
        <Targets>_ExecuteTestAssemblies</Targets>
        <SkipNonexistentTargets>false</SkipNonexistentTargets>
        <AdditionalProperties>Assemblies=@(TestAssembly);TestGroupName=%(TestAssembly.TestGroupName);TargetFramework=%(TestAssembly.TargetFramework);TargetFrameworkIdentifier=%(TestAssembly.TargetFrameworkIdentifier);TargetFrameworkVersion=%(TestAssembly.TargetFrameworkVersion)</AdditionalProperties>
      </_TestGroups>

      <!-- This runs the 'Test' target on projects which do not support VSTest, if that target exists. -->
      <_TestGroups Include="%(_ProjectToTestDirectly.Identity)">
        <Targets>Test</Targets>
        <SkipNonexistentTargets>true</SkipNonexistentTargets>
        <AdditionalProperties>%(_ProjectToTestDirectly.AdditionalProperties);$(BuildProperties)</AdditionalProperties>
      </_TestGroups>
    </ItemGroup>

    <MSBuild Condition="@(_TestGroups->Count()) != 0"
             Projects="@(_TestGroups)"
             Targets="%(_TestGroups.Targets)"
             SkipNonexistentTargets="%(_TestGroups.SkipNonexistentTargets)"
             BuildInParallel="false"
             ContinueOnError="$(_TestContinueOnError)" />
  </Target>

  <!-- The 'inner-build' -->
  <PropertyGroup>
    <TrxFileWithoutExtension>$(LogOutputDir)$(TestGroupName)-$(TargetFramework)-$(BuildNumber)</TrxFileWithoutExtension>
    <TrxFile>$(TrxFileWithoutExtension).trx</TrxFile>
    <TrxFile Condition="'$(RunFlakyTests)' == 'true'">$(TrxFileWithoutExtension).flaky.trx</TrxFile>
    <TrxFileWildcard>$(TrxFileWithoutExtension)*.trx</TrxFileWildcard>
    <VSTestLogger Condition=" '$(VSTestLogger)' == '' AND '$(CI)' == 'true' ">trx;LogFileName=$(TrxFile)</VSTestLogger>
    <VSTestDiagFileBase>$(LogOutputDir)$(TestGroupName)-$(TargetFramework)-$(BuildNumber)</VSTestDiagFileBase>
    <VSTestDiagFile Condition=" '$(VSTestVerboseOutput)' == 'true'">$(VSTestDiagFileBase).diag</VSTestDiagFile>
    <VSTestDiagFile Condition=" '$(VSTestVerboseOutput)' == 'true' And '$(RunFlakyTests)' == 'true'">$(VSTestDiagFileBase).flaky.diag</VSTestDiagFile>
    <!--
      Disable other test reporters if trx logging is enabled.
    -->
    <VSTestAutoReporters Condition=" '$(VSTestAutoReporters)' == '' AND '$(VSTestLogger)' != '' ">false</VSTestAutoReporters>
    <VSTestAutoReporters Condition=" '$(VSTestAutoReporters)' == '' ">true</VSTestAutoReporters>
  </PropertyGroup>

  <Target Name="_ExecuteTestAssemblies">
    <ItemGroup>
      <TestAssemblies Include="$(Assemblies)" />
    </ItemGroup>

    <PropertyGroup>
      <TestAdapterPath>%(TestAssemblies.RootDir)%(TestAssemblies.Directory)</TestAdapterPath>

      <_DefaultNonFlakyTestFilterExpression>Flaky:All!=true</_DefaultNonFlakyTestFilterExpression>
      <_DefaultNonFlakyTestFilterExpression Condition="'$(AGENT_OS)' != ''">$(_DefaultNonFlakyTestFilterExpression)&amp;Flaky:AzP:All!=true&amp;Flaky:AzP:OS:$(AGENT_OS)!=true</_DefaultNonFlakyTestFilterExpression>
      <_DefaultFlakyTestFilterExpression>Flaky:All=true</_DefaultFlakyTestFilterExpression>
      <_DefaultFlakyTestFilterExpression Condition="'$(AGENT_OS)' != ''">$(_DefaultFlakyTestFilterExpression)|Flaky:AzP:All=true|Flaky:AzP:OS:$(AGENT_OS)=true</_DefaultFlakyTestFilterExpression>

      <FlakyTestFilterExpression Condition="'$(FlakyTestFilterExpression)' == ''">$(_DefaultFlakyTestFilterExpression)</FlakyTestFilterExpression>
      <NonFlakyTestFilterExpression Condition="'$(NonFlakyTestFilterExpression)' == ''">$(_DefaultNonFlakyTestFilterExpression)</NonFlakyTestFilterExpression>

      <!-- If $(RunFlakyTests) = 'include' then we will do *neither* of these and we'll include flaky tests in the run -->
      <TestFilterExpression Condition="'$(TestFilterExpression)' == '' And '$(RunFlakyTests)' != 'true' And '$(RunFlakyTests)' != 'include'">$(NonFlakyTestFilterExpression)</TestFilterExpression>
      <TestFilterExpression Condition="'$(TestFilterExpression)' == '' And '$(RunFlakyTests)' == 'true'">$(FlakyTestFilterExpression)</TestFilterExpression>
    </PropertyGroup>

    <ItemGroup>
      <VSTestArgs Remove="@(VSTestArgs)" />
      <VSTestArgs Include="vstest" />
      <VSTestArgs Include="--Parallel" />
      <VSTestArgs Include="--Blame" Condition="'$(VSTestBlame)' == 'true'" />
      <VSTestArgs Include="--Diag:$([MSBuild]::Escape($(VSTestDiagFile)))" Condition="'$(VSTestDiagFile)' != ''" />
      <VSTestArgs Include="--Framework:$(TargetFrameworkIdentifier),Version=v$(TargetFrameworkVersion)" />
      <VSTestArgs Include="--Logger:$([MSBuild]::Escape($(VSTestLogger)))" Condition="'$(VSTestLogger)' != ''" />
      <VSTestArgs Include="--TestAdapterPath:$(TestAdapterPath)" Condition=" '$(TargetFrameworkIdentifier)' == '.NETFramework' " />
      <VSTestArgs Include="--TestCaseFilter:$(TestFilterExpression)" Condition="'$(TestFilterExpression)' != ''" />
      <VSTestArgs Include="@(TestAssemblies)" />
      <VSTestArgs Include="--;RunConfiguration.NoAutoReporters=true" Condition="'$(VSTestAutoReporters)' != 'true'" />
    </ItemGroup>

    <Message Text="%0AStarting test group: $(TestGroupName)/$(TargetFramework)" Importance="High" />

    <RunDotNet Arguments="@(VSTestArgs)" IgnoreExitCode="true" IgnoreStandardErrorWarningFormat="true">
      <Output TaskParameter="ExitCode" PropertyName="VsTestExitCode" />
    </RunDotNet>

    <ItemGroup>
      <_TrxFiles Include="$(TrxFileWildcard)" />
    </ItemGroup>

    <Message Text="##teamcity[importData type='vstest' verbose='false' path='$(TrxFileWildcard)']"
      Importance="High"
      Condition="'$(TEAMCITY_VERSION)' != '' AND Exists('%(_TrxFiles.FullPath)')" />
    <Error Text="Test group $(TestGroupName)/$(TargetFramework) failed with exit code '$(VsTestExitCode)'." Condition=" $(VsTestExitCode) != 0 " />
  </Target>

</Project>
