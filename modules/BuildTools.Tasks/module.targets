<Project>

  <PropertyGroup>
    <PrepareDependsOn>$(PrepareDependsOn);_UseVolatileFeed;ResolveCommitHash</PrepareDependsOn>
  </PropertyGroup>

  <Target Name="ResolveCommitHash" Condition="'$(CommitHash)' == '' OR '$(RepositoryCommit)' == ''">
    <PropertyGroup Condition=" '$(CommitHash)' == '' ">
      <CommitHash Condition="'$(APPVEYOR_REPO_COMMIT)' != ''">$(APPVEYOR_REPO_COMMIT)</CommitHash>
      <CommitHash Condition="'$(TRAVIS_COMMIT)' != ''">$(TRAVIS_COMMIT)</CommitHash>
      <CommitHash Condition="'$(RepositoryCommit)' != ''">$(RepositoryCommit)</CommitHash>
    </PropertyGroup>

    <GetGitCommitHash WorkingDirectory="$(RepositoryRoot)"
                      Condition="'$(CommitHash)' == ''"
                      ContinueOnError="WarnAndContinue">
      <Output TaskParameter="CommitHash" PropertyName="CommitHash" />
    </GetGitCommitHash>

    <PropertyGroup>
      <!--
        RepositoryCommit should be the same as CommitHash.
        We use CommitHash for backwards compatibility with build scripts.
        Setting RepositoryCommit enables NuGet features added in NuGet/NuGet.Client#2036.
      -->
      <RepositoryCommit>$(CommitHash)</RepositoryCommit>
      <SolutionProperties Condition="'$(CommitHash)' != ''">$(SolutionProperties);CommitHash=$(CommitHash)</SolutionProperties>
      <SolutionProperties Condition="'$(CommitHash)' != ''">$(SolutionProperties);RepositoryCommit=$(RepositoryCommit)</SolutionProperties>
    </PropertyGroup>
  </Target>

<!--
###################################################################
Targets: Resx

Generates resource files
###################################################################
-->
  <Target Name="Resx" DependsOnTargets="ResolveSolutions">
    <Warning Text="No solutions found to build in '$(RepositoryRoot)'" Condition="'@(Solutions)' == ''" />

    <PropertyGroup>
      <_ResxTargets>$(MSBuildThisFileDirectory)Project.CSharp.Resx.targets</_ResxTargets>
      <_ResxSlnProps>$(SolutionProperties)</_ResxSlnProps>
      <!-- See comments in Project.CSharp.Resx.targets for what this does-->
      <_ResxSlnProps>$(_ResxSlnProps);CustomAfterMicrosoftCommonTargets=$(_ResxTargets)</_ResxSlnProps>
      <_ResxSlnProps>$(_ResxSlnProps);CustomAfterMicrosoftCommonCrossTargetingTargets=$(_ResxTargets)</_ResxSlnProps>
    </PropertyGroup>

    <MSBuild Targets="_GenerateResx"
      Projects="@(Solutions)"
      Properties="$(_ResxSlnProps)"
      BuildInParallel="$(BuildInParallel)"
      Condition="'@(Solutions)' != ''" />
  </Target>

<!--
###################################################################
Targets: _UseVolatileFeed

Replaces $(RepositoryRoot)\NuGet.config feeds.
###################################################################
-->
  <ItemGroup>
    <_UpdateFeeds Include="ARTIFACTS" Value="$(NUGET_VOLATILE_FEED_ARTIFACTS)" Condition="'$(NUGET_VOLATILE_FEED_ARTIFACTS)' != ''" />
    <_UpdateFeeds Include="AspNetCore" Value="$(NUGET_VOLATILE_FEED_AspNetCore)" Condition="'$(NUGET_VOLATILE_FEED_AspNetCore)' != ''" />
  </ItemGroup>

  <Target Name="_UseVolatileFeed" Condition="'@(_UpdateFeeds)' != ''">
    <UpdatePackageSource NuGetConfigPath="$(RepositoryRoot)NuGet.config"
      SourceName="%(_UpdateFeeds.Identity)"
      SourceUri="%(_UpdateFeeds.Value)"
      Condition="'%(_UpdateFeeds.Value)' != ''" />
  </Target>

</Project>
