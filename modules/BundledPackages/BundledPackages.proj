<Project>

  <Import Project="..\..\build\dependencies.props" />

  <Target Name="Publish">

    <ItemGroup>
      <Projects Include="$(MSBuildThisFileDirectory)..\..\src\Internal.AspNetCore.Sdk\Internal.AspNetCore.Sdk.csproj" />
      <Projects Include="$(MSBuildThisFileDirectory)..\..\src\ApiCheck.Console\ApiCheck.Console.csproj" />
    </ItemGroup>

    <MSBuild Projects="@(Projects)"
      Targets="Pack"
      Properties="PackageOutputPath=$(PublishDir);Configuration=$(Configuration);BuildNumber=$(BuildNumber)"
      BuildInParallel="true"
      RemoveProperties="PublishDir" />

    <PropertyGroup>
      <!--
        This is a workaround for https://github.com/Microsoft/msbuild/issues/2914.
        Currently, the only way to configure the NuGetSdkResolver is with NuGet.config, which is not generally used in aspnet org projects.
        This project is restored so that it pre-populates the NuGet cache with SDK packages.
      -->
      <BundledPackageRestorerContent>
<![CDATA[
<Project>
  <Sdk Name="Internal.AspNetCore.Sdk" Version="$(Version)" />

  <PropertyGroup>
    <TargetFramework>netcoreapp2.1</TargetFramework>
    <DisableImplicitFrameworkReferences>true</DisableImplicitFrameworkReferences>
  </PropertyGroup>

  <ItemGroup>
    <PackageReference Include="MicroBuild.Core" Version="$(MicroBuildCorePackageVersion)" />
  </ItemGroup>

  <Target Name="noop" />
</Project>
]]>
      </BundledPackageRestorerContent>
    </PropertyGroup>

    <WriteLinesToFile File="$(PublishDir)BundledPackageRestorer.csproj" Lines="$(BundledPackageRestorerContent)" Overwrite="true" />
    <Copy SourceFiles="NuGet.config" DestinationFolder="$(PublishDir)" />
    <DownloadFile SourceUrl="https://www.nuget.org/api/v2/package/MicroBuild.Core/$(MicroBuildCorePackageVersion)" DestinationFolder="$(PublishDir)" DestinationFileName="MicroBuild.Core.$(MicroBuildCorePackageVersion).nupkg" />
  </Target>

</Project>
