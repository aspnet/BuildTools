<Project>
  <Target Name="CodeSign" Condition=" '$(DisableCodeSigning)' != 'true' "
          AfterTargets="Package"
          DependsOnTargets="$(CodeSignDependsOn)">

    <GetPathToFullMSBuild>
      <Output TaskParameter="MSBuildx86Path" PropertyName="MSBuildx86Path" />
    </GetPathToFullMSBuild>

    <ItemGroup>
      <!-- Reset internal item groups. -->
      <_FileSignInfo Remove="@(_FileSignInfo)" />
      <_ItemsToSign Remove="@(_ItemsToSign)" />

      <!--
        Map KoreBuild items into SignTool task items.
      -->
      <_FileSignInfo Include="%(FilesToSign.FileName)%(FilesToSign.Extension)" CertificateName="%(FilesToSign.Certificate)" />
      <_FileSignInfo Include="%(FilesToExcludeFromSigning.FileName)%(FilesToExcludeFromSigning.Extension)" CertificateName="None" />

      <!--
        Only pass in top-level items. FilesToSign contains items which will be nested in a .nupkg or .vsix.
        If this list isn't filtered, SignTool task will overwrite files in the obj/ folders of projects which breaks
        incremental compilation.
      -->
      <_ItemsToSign Include="%(FilesToSign.Identity)" Condition=" '%(FilesToSign.Container)' == '' " />
    </ItemGroup>

    <Microsoft.DotNet.SignTool.SignToolTask
      DryRun="$(SignToolDryRun)"
      TestSign="$(SignToolTestSign)"
      ItemsToSign="@(_ItemsToSign)"
      FileSignInfo="@(_FileSignInfo);@(FileNamesToSign)"
      StrongNameSignInfo="@(AssemblyToSign)"
      FileExtensionSignInfo="@(FileExtensionsToSign)"
      TempDir="$(IntermediateDir)"
      LogDir="$(LogOutputDir)"
      MSBuildPath="$(MSBuildx86Path)"
      MicroBuildCorePath="$(NuGetPackageRoot)microbuild.core\$(MicroBuildCorePackageVersion)" />
  </Target>

  <Target Name="SignCheck"
          Condition=" '$(DisableCodeSigning)' != 'true' AND '$(SignToolDryRun)' != 'true' AND '$(DisableSignCheck)' != 'true' "
          AfterTargets="CodeSign">

    <PropertyGroup>
      <SignCheckToolPath>$(MSBuildThisFileDirectory)SignCheck\tools\Microsoft.DotNet.SignCheck.exe</SignCheckToolPath>
    </PropertyGroup>

    <ItemGroup>
      <SignCheckArgs Remove="@(SignCheckArgs)" />
      <SignCheckArgs Include="--error-log-file;$(LogOutputDir)signcheck.errors.log" />
      <SignCheckArgs Include="--generate-exclusions-file;$(LogOutputDir)signcheck.exclusions.g.txt" />
      <SignCheckArgs Include="--recursive" />
      <SignCheckArgs Include="--verify-jar" />
      <SignCheckArgs Include="--verify-strongname" Condition=" '$(DisableSignCheckStrongName)' != 'true' " />
      <SignCheckArgs Include="--exclusions-file;$(SignCheckExclusionsFile)" Condition="Exists('$(SignCheckExclusionsFile)')" />
    </ItemGroup>

    <Message Text="Running signcheck on @(SignCheckDirectory, ', ')" Importance="high" />

    <Run FileName="$(SignCheckToolPath)" Arguments="@(SignCheckArgs);--input-files;%(SignCheckDirectory.Identity)" />
  </Target>

</Project>
