<Project>

  <PropertyGroup>
    <PrepareDependsOn Condition=" '$(DisableDefaultTargets)' != 'true' ">GetToolsets;$(PrepareDependsOn)</PrepareDependsOn>
    <RestoreDependsOn Condition=" '$(DisableDefaultTargets)' != 'true' ">InstallDotNet;CheckPackageReferences;$(RestoreDependsOn)</RestoreDependsOn>
    <PackageDependsOn Condition=" '$(DisableDefaultTargets)' != 'true' ">$(PackageDependsOn);GenerateSignRequest</PackageDependsOn>

    <GenerateSignRequest Condition="'$(GenerateSignRequest)' == ''">true</GenerateSignRequest>

    <DisablePackageReferenceRestrictions Condition=" '$(DisablePackageReferenceRestrictions)' == '' ">false</DisablePackageReferenceRestrictions>
    <KoreBuildConfigFile Condition="'$(KoreBuildConfigFile)' == ''">$(RepositoryRoot)korebuild.json</KoreBuildConfigFile>
    <DependencyVersionsFile Condition="'$(DependencyVersionsFile)' == ''">$(RepositoryRoot)build\dependencies.props</DependencyVersionsFile>
    <SignRequestOutputPath>$(ArtifactsDir)signrequest.xml</SignRequestOutputPath>
  </PropertyGroup>

<!--
####################################################################################
Target: En/DisableSkipStrongNames

These targets configure strong name verification for .NET Framework
####################################################################################
-->
  <Target Name="EnableSkipStrongNames">
    <EnableSkipStrongName
      XmlFile="$(SkipStrongNamesXml)" />
  </Target>

  <Target Name="DisableSkipStrongNames">
    <DisableSkipStrongName
      XmlFile="$(SkipStrongNamesXml)" />
  </Target>

<!--
####################################################################################
Target: InstallDotNet

Downloads and extracts .NET Core shared runtimes and SDKs.
####################################################################################
-->
  <Target Name="InstallDotNet">
    <PropertyGroup>
      <_DotNetInstall>$(MSBuildThisFileDirectory)..\..\scripts\dotnet-install</_DotNetInstall>
      <_DotNetInstall Condition="$([MSBuild]::IsOSUnixLike())">$(_DotNetInstall).sh</_DotNetInstall>
      <_DotNetInstall Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(_DotNetInstall).cmd</_DotNetInstall>
    </PropertyGroup>

    <InstallDotNet
      Assets="@(DotNetCoreSdk);@(DotNetCoreRuntime);@(AspNetCoreRuntime)"
      DotNetHome="$(DOTNET_HOME)"
      InstallScript="$(_DotNetInstall)"/>
  </Target>


<!--
####################################################################################
Target: CheckPackageReferences

Validates that all PackageReference's use the $(IdPackageVersion) pattern.
####################################################################################
-->
  <ItemGroup>
    <CommonlyImportedFiles Include="$(RepositoryRoot)Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)benchmarks\Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)benchmarks\Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)samples\Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)samples\Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)src\Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)src\Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)test\Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)test\Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)build\common.props" />
  </ItemGroup>

  <Target Name="CheckPackageReferences"
          DependsOnTargets="ResolveSolutions"
          Condition="'$(DisablePackageReferenceRestrictions)' != 'true'">
    <ItemGroup>
      <CommonlyImportedFiles Remove="@(CommonlyImportedFiles)" Condition="!Exists(%(CommonlyImportedFiles.Identity))" />
    </ItemGroup>

    <CheckPackageReferences
      Projects="@(Solutions);@(CommonlyImportedFiles)"
      DependenciesFile="$(DependencyVersionsFile)"
      Properties="$(SolutionProperties)"/>
  </Target>

<!--
####################################################################################
Target: UpgradeDependencies

Fetchs a remote configuration of latest dependencies to use, and modifies the
dependencies.props file in the current project to use latest versions.
####################################################################################
-->

  <!-- See also DependenciesUpgradeCommand.cs in KoreBuild.Console for a more discoverable way to run this. -->
  <Target Name="UpgradeDependencies">
    <Error Text="LineupPackageId was not set." Condition="'$(LineupPackageId)' == ''" />
    <Error Text="LineupPackageRestoreSource was not set." Condition="'$(LineupPackageRestoreSource)' == ''" />

    <UpgradeDependencies
      DependenciesFile="$(DependencyVersionsFile)"
      LineupPackageId="$(LineupPackageId)"
      LineupPackageVersion="$(LineupPackageVersion)"
      LineupPackageRestoreSource="$(LineupPackageRestoreSource)" />
  </Target>

<!--
####################################################################################
Target: GenerateDependenciesPropsFile

Generates a dependencies.props file from existing MSBuild projects, replacing
explicit versions with version variables.
####################################################################################
-->
  <!-- See also DependenciesGenerateCommand.cs in KoreBuild.Console for a more discoverable way to run this. -->
  <Target Name="GenerateDependenciesPropsFile" DependsOnTargets="ResolveSolutions">
    <ItemGroup>
      <CommonlyImportedFiles Remove="@(CommonlyImportedFiles)" Condition="!Exists(%(CommonlyImportedFiles.Identity))" />
    </ItemGroup>

    <GenerateDependenciesPropsFile
      Projects="@(Solutions)"
      OtherImports="@(CommonlyImportedFiles)"
      DependenciesFile="$(DependencyVersionsFile)"
      Properties="$(SolutionProperties)" />
  </Target>

<!--
####################################################################################
Target: GetToolsets

Parses the korebuild.json file and finds required toolsets such as Visual Studio
and NodeJS.
####################################################################################
-->
  <!-- This target asserts that all tools listed in korebuild.json are available. -->
  <Target Name="GetToolsets" Condition="Exists($(KoreBuildConfigFile))">
    <GetToolsets ConfigFile="$(KoreBuildConfigFile)">
      <Output TaskParameter="VisualStudioMSBuildx86Path" PropertyName="VisualStudioMSBuildx86Path" />
      <Output TaskParameter="VisualStudioMSBuildx64Path" PropertyName="VisualStudioMSBuildx64Path" />
      <Output TaskParameter="NodeJSPath" PropertyName="NodeJSPath" />
    </GetToolsets>
  </Target>


<!--
####################################################################################
Target: VerifySignRequestItems

Verifies all artifact items have a corresponding sign item.
####################################################################################
-->
  <Target Name="VerifySignRequestItems"
          DependsOnTargets="GetArtifactInfo"
          Condition="'$(GenerateSignRequest)' == 'true' AND '$(SkipArtifactVerification)' != 'true'">

    <ItemGroup>
      <_ExpectedFileToSign Remove="@(_ExpectedFileToSign)" />
      <_ExpectedFileToSign Include="@(ArtifactInfo)" />
      <_ExpectedFileToSign Remove="@(FilesToSign);@(FilesToExcludeFromSigning);$(SignRequestOutputPath)" />
      <_FilesToSignMissingConfig Remove="@(_FilesToSignMissingConfig)" />
      <_FilesToSignMissingConfig Include="@(FilesToSign)" Condition=" '%(FilesToSign.Certificate)' == '' AND '%(FilesToSign.StrongName)' == '' AND '%(FilesToSign.IsContainer)' != 'true' " />
    </ItemGroup>

    <PropertyGroup>
      <_SigningErrorMessage Condition=" @(_ExpectedFileToSign->Count()) != 0 ">
Could not determine signing information for all ArtifactInfo items.
Fix this error by adding these items to FilesToSign or FilesToExcludeFromSigning:
  - @(_ExpectedFileToSign, '%0A  - ')
      </_SigningErrorMessage>
    </PropertyGroup>

    <Error Text="$(_SigningErrorMessage.Trim())"
           Code="KRB5003"
           Condition=" @(_ExpectedFileToSign->Count()) != 0 " />

    <PropertyGroup>
      <_SigningErrorMessage Condition=" @(_FilesToSignMissingConfig->Count()) != 0 ">
The following FilesToSign did not specify a Certificate or StrongName to use.
  - @(_FilesToSignMissingConfig, '%0A  - ')
      </_SigningErrorMessage>
    </PropertyGroup>

    <Error Text="$(_SigningErrorMessage.Trim())"
           Code="KRB5004"
           Condition=" @(_FilesToSignMissingConfig->Count()) != 0 " />
  </Target>

<!--
####################################################################################
Target: GenerateSignRequest

Generates a manifest that contains signing requests for files.

[in] (items) FilesToSign
[in] (items) FilesToExcludeFromSigning

[out] SignRequestOutputPath - the bom file
####################################################################################
-->
  <ItemGroup Condition=" '$(GenerateSignRequest)' == 'true' ">
    <ArtifactInfo Include="$(SignRequestOutputPath)">
      <ArtifactType>XmlFile</ArtifactType>
      <Category>noship</Category>
    </ArtifactInfo>
  </ItemGroup>

  <Target Name="GenerateSignRequest"
          DependsOnTargets="GetArtifactInfo;VerifySignRequestItems"
          Condition=" '$(GenerateSignRequest)' == 'true' ">

    <GenerateSignRequest
      Requests="@(FilesToSign)"
      Exclusions="@(FilesToExcludeFromSigning)"
      BasePath="$(ArtifactsDir)"
      OutputPath="$(SignRequestOutputPath)" />
  </Target>

</Project>
