<Project>
  <Import Project="CodeSign.targets" />

  <PropertyGroup>
    <PrepareDependsOn Condition=" '$(DisableDefaultTargets)' != 'true' ">GetToolsets;$(PrepareDependsOn)</PrepareDependsOn>
    <RestoreDependsOn Condition=" '$(DisableDefaultTargets)' != 'true' ">InstallDotNet;$(RestoreDependsOn)</RestoreDependsOn>

    <KoreBuildConfigFile Condition="'$(KoreBuildConfigFile)' == ''">$(RepositoryRoot)korebuild.json</KoreBuildConfigFile>
    <DependencyVersionsFile Condition="'$(DependencyVersionsFile)' == ''">$(RepositoryRoot)build\dependencies.props</DependencyVersionsFile>
  </PropertyGroup>

<!--
####################################################################################
Target: En/DisableSkipStrongNames

These targets configure strong name verification for .NET Framework
####################################################################################
-->
  <Target Name="EnableSkipStrongNames">
    <EnableSkipStrongName
      XmlFile="$(SkipStrongNamesXml)" />
  </Target>

  <Target Name="DisableSkipStrongNames">
    <DisableSkipStrongName
      XmlFile="$(SkipStrongNamesXml)" />
  </Target>

<!--
####################################################################################
Target: InstallDotNet

Downloads and extracts .NET Core shared runtimes and SDKs.
####################################################################################
-->
  <Target Name="InstallDotNet">
    <PropertyGroup>
      <_DotNetInstall>$(MSBuildThisFileDirectory)..\..\scripts\dotnet-install</_DotNetInstall>
      <_DotNetInstall Condition="$([MSBuild]::IsOSUnixLike())">$(_DotNetInstall).sh</_DotNetInstall>
      <_DotNetInstall Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(_DotNetInstall).cmd</_DotNetInstall>
    </PropertyGroup>

    <InstallDotNet
      Assets="@(DotNetCoreSdk);@(DotNetCoreRuntime);@(AspNetCoreRuntime)"
      DotNetHome="$(DOTNET_HOME)"
      InstallScript="$(_DotNetInstall)"/>
  </Target>

<!--
####################################################################################
Target: GetToolsets

Parses the korebuild.json file and finds required toolsets such as Visual Studio
and NodeJS.
####################################################################################
-->
  <!-- This target asserts that all tools listed in korebuild.json are available. -->
  <Target Name="GetToolsets" Condition="Exists($(KoreBuildConfigFile))">
    <GetToolsets ConfigFile="$(KoreBuildConfigFile)">
      <Output TaskParameter="VisualStudioMSBuildx86Path" PropertyName="VisualStudioMSBuildx86Path" />
      <Output TaskParameter="VisualStudioMSBuildx64Path" PropertyName="VisualStudioMSBuildx64Path" />
      <Output TaskParameter="NodeJSPath" PropertyName="NodeJSPath" />
    </GetToolsets>
  </Target>

<!--
####################################################################################
Target: VerifySignRequestItems

Verifies all artifact items have a corresponding sign item.
####################################################################################
-->
  <Target Name="VerifySignRequestItems"
          DependsOnTargets="GetArtifactInfo"
          Condition="'$(DisableCodeSigning)' != 'true' AND '$(SkipArtifactVerification)' != 'true'">

    <ItemGroup>
      <_FilesToSignMissingConfig Remove="@(_FilesToSignMissingConfig)" />
      <_FilesToSignMissingConfig Include="@(FilesToSign)" Condition=" '%(FilesToSign.Certificate)' == '' AND '%(FilesToSign.StrongName)' == '' AND '%(FilesToSign.IsContainer)' != 'true' " />
    </ItemGroup>

    <PropertyGroup>
      <_SigningErrorMessage Condition=" @(_FilesToSignMissingConfig->Count()) != 0 ">
The following FilesToSign did not specify a Certificate or StrongName to use.
  - @(_FilesToSignMissingConfig, '%0A  - ')
      </_SigningErrorMessage>
    </PropertyGroup>

    <Error Text="$(_SigningErrorMessage.Trim())"
           Code="KRB5004"
           Condition=" @(_FilesToSignMissingConfig->Count()) != 0 " />
  </Target>

</Project>
