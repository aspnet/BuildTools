<Project>

  <PropertyGroup>
    <RestoreDependsOn>ApplyNuGetPolicies;InstallDotNet;CheckPackageReferences;$(RestoreDependsOn)</RestoreDependsOn>
    <ApplyNuGetPoliciesDependsOn>
      $(ApplyNuGetPoliciesDependsOn);
      Prepare;
      ResolveSolutions;
    </ApplyNuGetPoliciesDependsOn>
    
    <DisablePackageReferenceRestrictions Condition=" '$(DisablePackageReferenceRestrictions)' == '' ">false</DisablePackageReferenceRestrictions>
    <DependencyVersionsFile Condition="'$(DependencyVersionsFile)' == ''">$(RepositoryRoot)build\dependencies.props</DependencyVersionsFile>
  </PropertyGroup>

  <ItemGroup Condition="@(PackageLineup->Count()) != 0 AND '$(RestrictVersionOnPackageReference)' != 'false' ">
    <!-- Automatically warn about package reference's that have a non-empty version, but only when lineups are used. -->
    <DisallowPackageReferenceVersion Include="Debug" ErrorLevel="warn"/>
    <DisallowPackageReferenceVersion Include="Release" ErrorLevel="error"/>
  </ItemGroup>

  <Target Name="GetLineups"
          Returns="@(PackageLineup)" />

  <Target Name="Pin" DependsOnTargets="ApplyNuGetPolicies">
    <Message Text="Pinning done. Run /t:Restore to install the updated versions." Importance="High" />
  </Target>

  <Target Name="ApplyNuGetPolicies"
          DependsOnTargets="$(ApplyNuGetPoliciesDependsOn)"
          Condition="@(Solutions->Count()) != 0">

    <ApplyNuGetPolicies
      Policies="@(PackageLineup);@(AdditionalRestoreSources);@(DisallowPackageReferenceVersion);@(FolderLineup)"
      Projects="@(Solutions)"
      ProjectProperties="$(SolutionProperties)"
      SolutionDirectory="$(RepositoryRoot)"
      RestoreSources="$(PolicyRestoreSources)"
      RestoreAdditionalSources="$(PolicyRestoreAdditionalSources)"
      RestorePackagesPath="$(PolicyRestorePackagesPath)"
      RestoreDisableParallel="$(PolicyRestoreDisableParallel)"
      RestoreConfigFile="$(PolicyRestoreConfigFile)"
      RestoreNoCache="$(PolicyRestoreNoCache)"
      RestoreIgnoreFailedSources="$(PolicyRestoreIgnoreFailedSources)" />

  </Target>

  <Target Name="InstallDotNet">
    <PropertyGroup>
      <_DotNetInstall>$(MSBuildThisFileDirectory)..\..\scripts\dotnet-install</_DotNetInstall>
      <_DotNetInstall Condition="$([MSBuild]::IsOSUnixLike())">$(_DotNetInstall).sh</_DotNetInstall>
      <_DotNetInstall Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(_DotNetInstall).cmd</_DotNetInstall>
    </PropertyGroup>

    <InstallDotNet
      Assets="@(DotNetCoreSdk);@(DotNetCoreRuntime)"
      DotNetHome="$(DOTNET_HOME)"
      InstallScript="$(_DotNetInstall)"/>
  </Target>

  <ItemGroup>
    <CommonlyImportedFiles Include="$(RepositoryRoot)Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)src\Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)src\Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)test\Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)test\Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)build\common.props" />
  </ItemGroup>

  <Target Name="CheckPackageReferences" DependsOnTargets="ResolveSolutions" Condition="'$(DisablePackageReferenceRestrictions)' != 'true' AND @(PackageLineup->Count()) == 0">
    <ItemGroup>
      <CommonlyImportedFiles Remove="@(CommonlyImportedFiles)" Condition="!Exists(%(CommonlyImportedFiles.Identity))" />
    </ItemGroup>

    <!-- Issue the warning repos not using PackageLineup or that have not set LineupPackageId about a breaking change. -->
    <Warning Text="Upcoming breaking change to KoreBuild. You should set DisablePackageReferenceRestrictions=true if this is not a regular aspnetcore project. See https://github.com/aspnet/BuildTools/wiki/PackageReference-management for details."
             Condition=" '$(LineupPackageId)' == '' "/>

    <!-- At some future date, we will make this always run, even if LineupPackageId is not set. We're using LineupPackageId as the way to tell if a repo has started using this pattern yet. -->
    <CheckPackageReferences Projects="@(Solutions);@(CommonlyImportedFiles)"
      DependenciesFile="$(DependencyVersionsFile)"
      Properties="$(SolutionProperties)"
      Condition=" '$(LineupPackageId)' != '' "/>
  </Target>

  <!-- See also DependenciesUpgradeCommand.cs in KoreBuild.Console for a more discoverable way to run this. -->
  <Target Name="UpgradeDependencies">
    <Error Text="LineupPackageId was not set." Condition="'$(LineupPackageId)' == ''" />
    <Error Text="LineupPackageRestoreSource was not set." Condition="'$(LineupPackageRestoreSource)' == ''" />
    
    <UpgradeDependenciesPropsFile
      DependenciesFile="$(DependencyVersionsFile)"
      LineupPackageId="$(LineupPackageId)"
      LineupPackageVersion="$(LineupPackageVersion)"
      LineupPackageRestoreSource="$(LineupPackageRestoreSource)" />
  </Target>

  <!-- See also DependenciesGenerateCommand.cs in KoreBuild.Console for a more discoverable way to run this. -->
  <Target Name="GenerateDependenciesPropsFile" DependsOnTargets="ResolveSolutions;Pin">
    <ItemGroup>
      <CommonlyImportedFiles Remove="@(CommonlyImportedFiles)" Condition="!Exists(%(CommonlyImportedFiles.Identity))" />
    </ItemGroup>

    <GenerateDependenciesPropsFile
      Projects="@(Solutions)"
      OtherImports="@(CommonlyImportedFiles)"
      DependenciesFile="$(DependencyVersionsFile)"
      Properties="$(SolutionProperties)" />
  </Target>

</Project>
