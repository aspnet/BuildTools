<Project>

  <PropertyGroup>
    <PrepareDependsOn Condition=" '$(DisableDefaultTargets)' != 'true' ">GetToolsets;$(PrepareDependsOn)</PrepareDependsOn>
    <RestoreDependsOn Condition=" '$(DisableDefaultTargets)' != 'true' ">InstallDotNet;CheckPackageReferences;$(RestoreDependsOn)</RestoreDependsOn>

    <DisablePackageReferenceRestrictions Condition=" '$(DisablePackageReferenceRestrictions)' == '' ">false</DisablePackageReferenceRestrictions>
    <KoreBuildConfigFile Condition="'$(KoreBuildConfigFile)' == ''">$(RepositoryRoot)korebuild.json</KoreBuildConfigFile>
    <DependencyVersionsFile Condition="'$(DependencyVersionsFile)' == ''">$(RepositoryRoot)build\dependencies.props</DependencyVersionsFile>
  </PropertyGroup>

  <Target Name="EnableSkipStrongNames">
    <EnableSkipStrongName
      XmlFile="$(SkipStrongNamesXml)" />
  </Target>

  <Target Name="DisableSkipStrongNames">
    <DisableSkipStrongName
      XmlFile="$(SkipStrongNamesXml)" />
  </Target>

  <Target Name="InstallDotNet">
    <PropertyGroup>
      <_DotNetInstall>$(MSBuildThisFileDirectory)..\..\scripts\dotnet-install</_DotNetInstall>
      <_DotNetInstall Condition="$([MSBuild]::IsOSUnixLike())">$(_DotNetInstall).sh</_DotNetInstall>
      <_DotNetInstall Condition="$([MSBuild]::IsOSPlatform('Windows'))">$(_DotNetInstall).cmd</_DotNetInstall>
    </PropertyGroup>

    <InstallDotNet
      Assets="@(DotNetCoreSdk);@(DotNetCoreRuntime)"
      DotNetHome="$(DOTNET_HOME)"
      InstallScript="$(_DotNetInstall)"/>
  </Target>

  <ItemGroup>
    <CommonlyImportedFiles Include="$(RepositoryRoot)Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)benchmarks\Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)benchmarks\Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)samples\Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)samples\Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)src\Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)src\Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)test\Directory.Build.props" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)test\Directory.Build.targets" />
    <CommonlyImportedFiles Include="$(RepositoryRoot)build\common.props" />
  </ItemGroup>

  <Target Name="CheckPackageReferences"
          DependsOnTargets="ResolveSolutions"
          Condition="'$(DisablePackageReferenceRestrictions)' != 'true'">
    <ItemGroup>
      <CommonlyImportedFiles Remove="@(CommonlyImportedFiles)" Condition="!Exists(%(CommonlyImportedFiles.Identity))" />
    </ItemGroup>

    <CheckPackageReferences
      Projects="@(Solutions);@(CommonlyImportedFiles)"
      DependenciesFile="$(DependencyVersionsFile)"
      Properties="$(SolutionProperties)"/>
  </Target>

  <!-- See also DependenciesUpgradeCommand.cs in KoreBuild.Console for a more discoverable way to run this. -->
  <Target Name="UpgradeDependencies">
    <Error Text="LineupPackageId was not set." Condition="'$(LineupPackageId)' == ''" />
    <Error Text="LineupPackageRestoreSource was not set." Condition="'$(LineupPackageRestoreSource)' == ''" />

    <UpgradeDependencies
      DependenciesFile="$(DependencyVersionsFile)"
      LineupPackageId="$(LineupPackageId)"
      LineupPackageVersion="$(LineupPackageVersion)"
      LineupPackageRestoreSource="$(LineupPackageRestoreSource)" />
  </Target>

  <!-- See also DependenciesGenerateCommand.cs in KoreBuild.Console for a more discoverable way to run this. -->
  <Target Name="GenerateDependenciesPropsFile" DependsOnTargets="ResolveSolutions">
    <ItemGroup>
      <CommonlyImportedFiles Remove="@(CommonlyImportedFiles)" Condition="!Exists(%(CommonlyImportedFiles.Identity))" />
    </ItemGroup>

    <GenerateDependenciesPropsFile
      Projects="@(Solutions)"
      OtherImports="@(CommonlyImportedFiles)"
      DependenciesFile="$(DependencyVersionsFile)"
      Properties="$(SolutionProperties)" />
  </Target>

  <!-- This target asserts that all tools listed in korebuild.json are available. -->
  <Target Name="GetToolsets" Condition="Exists($(KoreBuildConfigFile))">
    <GetToolsets ConfigFile="$(KoreBuildConfigFile)">
      <Output TaskParameter="VisualStudioMSBuildx86Path" PropertyName="VisualStudioMSBuildx86Path" />
      <Output TaskParameter="VisualStudioMSBuildx64Path" PropertyName="VisualStudioMSBuildx64Path" />
      <Output TaskParameter="NodeJSPath" PropertyName="NodeJSPath" />
    </GetToolsets>
  </Target>

</Project>
