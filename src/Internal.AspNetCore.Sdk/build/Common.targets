<!--
WARNING: These targets are intended for building Microsoft's ASP.NET Core repos, and is not intended
for use outside of Microsoft.

Usage: This file needs to be imported into the 'outer build'.

For multi-targeting projects, this will be imported from buildMultiTargeting/Internal.AspNetCore.Sdk.targets.
For single-tfm projects, this will be imported from build/Internal.AspNetCore.Sdk.targets.

-->
<Project>

  <PropertyGroup Condition=" '$(IncludeSymbols)' != 'false' ">
    <GenerateNuspecDependsOn>$(GenerateNuspecDependsOn);_EnsureDebugTypeIsPortable</GenerateNuspecDependsOn>
    <PackDependsOn Condition="'$(NuspecFile)' != ''">$(PackDependsOn);_GenerateSymbolsNupkg</PackDependsOn>

    <!-- workaround https://github.com/NuGet/Home/issues/4726 -->
    <IncludeSymbols Condition="'$(NuspecFile)'!=''">false</IncludeSymbols>
    <IncludeSource Condition="'$(NuspecFile)'!=''">false</IncludeSource>

    <TargetsForTfmSpecificBuildOutput>$(TargetsForTfmSpecificBuildOutput);_EnsureDebugTypeIsPortable</TargetsForTfmSpecificBuildOutput>
  </PropertyGroup>

  <Target Name="_GenerateSymbolsNupkg" >
    <Error Condition="'$(NuspecFile)' != '' AND '$(SymbolsNuspecFile)' == ''"
      Text="NuspecFile was specified but SymbolsNuspecFile was not specified."
      Code="KRB5006" />

    <ConvertToAbsolutePath Paths="$(SymbolsNuspecFile)">
      <Output TaskParameter="AbsolutePaths" PropertyName="SymbolNuspecFileAbsolutePath" />
    </ConvertToAbsolutePath>

    <ConvertToAbsolutePath Paths="$(IntermediateOutputPath)symbols-nupkg\">
      <Output TaskParameter="AbsolutePaths" PropertyName="SymbolsPackageOutputAbsolutePath" />
    </ConvertToAbsolutePath>

    <PackTask PackItem="$(PackProjectInputFile)"
              PackageVersion="$(PackageVersion)"
              PackageId="$(PackageId)"
              Title="$(Title)"
              Authors="$(Authors)"
              Description="$(PackageDescription)"
              Copyright="$(Copyright)"
              RequireLicenseAcceptance="$(PackageRequireLicenseAcceptance)"
              LicenseUrl="$(PackageLicenseUrl)"
              ProjectUrl="$(PackageProjectUrl)"
              IconUrl="$(PackageIconUrl)"
              ReleaseNotes="$(PackageReleaseNotes)"
              Tags="$(PackageTags)"
              AssemblyName="$(AssemblyName)"
              PackageOutputPath="$(SymbolsPackageOutputAbsolutePath)"
              IncludeSymbols="false"
              IncludeSource="false"
              PackageTypes="$(PackageType)"
              IsTool="$(IsTool)"
              RepositoryUrl="$(RepositoryUrl)"
              RepositoryType="$(RepositoryType)"
              NoPackageAnalysis="$(NoPackageAnalysis)"
              MinClientVersion="$(MinClientVersion)"
              Serviceable="$(Serviceable)"
              ContinuePackingAfterGeneratingNuspec="$(ContinuePackingAfterGeneratingNuspec)"
              NuspecOutputPath="$(SymbolNuspecFileAbsolutePath)"
              IncludeBuildOutput="false"
              RestoreOutputPath="$(RestoreOutputAbsolutePath)"
              NuspecFile="$(SymbolNuspecFileAbsolutePath)"
              NuspecBasePath="$(NuspecBasePath)"
              NuspecProperties="$(NuspecProperties)"
              AllowedOutputExtensionsInPackageBuildOutputFolder="$(AllowedOutputExtensionsInPackageBuildOutputFolder)"
              AllowedOutputExtensionsInSymbolsPackageBuildOutputFolder="$(AllowedOutputExtensionsInSymbolsPackageBuildOutputFolder)"/>

    <Move
      SourceFiles="$(SymbolsPackageOutputAbsolutePath)$(PackageId).$(PackageVersion).nupkg"
      DestinationFiles="$(PackageOutputAbsolutePath)$(PackageId).$(PackageVersion).symbols.nupkg" />
  </Target>

  <Target Name="_EnsureDebugTypeIsPortable">
    <Error Condition=" '$(DebugType)' != 'portable' "
      Code="KRB5005"
      Text="The project was set to produce a symbols package but the project was built using DebugType = $(DebugType). Set DebugType = portable to include portable pdbs required for symbol publishing or stop producing symbols by setting IncludeSymbols=false." />
  </Target>

  <Target Name="_ShowBuildVersion" BeforeTargets="PrepareForBuild">
    <Message Text="Build version: $(AssemblyName)/$(TargetFramework)/$(Version)" Importance="normal" />

    <Warning Text="Version does not match RepoVersion. Version = '$(Version)' and RepoVersion = '$(RepoVersion)'."
             Code="KRB2001"
             Condition="'$(RepoVersion)' != '' AND '$(RepoVersion)' != '$(Version)' AND '$(VerifyVersion)' != 'false' " />

    <Warning Text="PackageVersion does not match RepoPackageVersion. PackageVersion = '$(PackageVersion)' and RepoPackageVersion = '$(RepoPackageVersion)'"
             Code="KRB2002"
             Condition="'$(RepoPackageVersion)' != '' AND '$(RepoPackageVersion)' != '$(PackageVersion)' AND '$(VerifyVersion)' != 'false' " />
  </Target>

  <Target Name="_CoreGenerateCSharpForResources">
    <RemoveDuplicates Inputs="@(EmbeddedResource)">
      <Output TaskParameter="Filtered" ItemName="_ResxFiles"/>
    </RemoveDuplicates>

    <ItemGroup>
      <_ResxFiles Update="@(_ResxFiles)" Condition="'%(_ResxFiles.GeneratedFileName)' == ''">
        <GeneratedFileName>Properties\%(FileName).Designer.cs</GeneratedFileName>
      </_ResxFiles>
    </ItemGroup>

    <Message Importance="high" Text="Found @(_ResxFiles ->Count()) resx file(s) in $(MSBuildProjectName)" />

    <Sdk_GenerateResxDesignerFiles ResourceFiles="@(_ResxFiles)">
      <Output TaskParameter="FileWrites" ItemName="FileWrites" />
    </Sdk_GenerateResxDesignerFiles>
  </Target>

</Project>
